// Mocks generated by Mockito 5.4.0 from annotations
// in flutter_clean_architecture/test/src/presentation/ui/home/home_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_clean_architecture/src/data/model/models.dart' as _i4;
import 'package:flutter_clean_architecture/src/domain/usecase/movie/fetch_movies_usecase.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FetchMovieUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchMovieUseCase extends _i1.Mock implements _i2.FetchMovieUseCase {
  MockFetchMovieUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.MovieDataModel>> createObservable(
          _i2.MovieType? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #createObservable,
          [params],
        ),
        returnValue:
            _i3.Future<List<_i4.MovieDataModel>>.value(<_i4.MovieDataModel>[]),
      ) as _i3.Future<List<_i4.MovieDataModel>>);
  @override
  _i3.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
